

<feed xmlns="http://www.w3.org/2005/Atom">
  <id>https://forte-naop.github.io/</id>
  <title>Forte's Notes</title>
  <subtitle>A minimal, responsive and feature-rich Jekyll theme for technical writing.</subtitle>
  <updated>2025-02-20T10:10:28+09:00</updated>
  <author>
    <name>Forte</name>
    <uri>https://forte-naop.github.io/</uri>
  </author>
  <link rel="self" type="application/atom+xml" href="https://forte-naop.github.io/feed.xml"/>
  <link rel="alternate" type="text/html" hreflang="en"
    href="https://forte-naop.github.io/"/>
  <generator uri="https://jekyllrb.com/" version="4.4.1">Jekyll</generator>
  <rights> © 2025 Forte </rights>
  <icon>/assets/img/favicons/favicon.ico</icon>
  <logo>/assets/img/favicons/favicon-96x96.png</logo>


  
  <entry>
    <title>Manacher 알고리즘</title>
    <link href="https://forte-naop.github.io/posts/Manacher/" rel="alternate" type="text/html" title="Manacher 알고리즘" />
    <published>2025-02-06T08:42:47+09:00</published>
  
    <updated>2025-02-06T08:42:47+09:00</updated>
  
    <id>https://forte-naop.github.io/posts/Manacher/</id>
    <content type="text/html" src="https://forte-naop.github.io/posts/Manacher/" />
    <author>
      <name>Forte</name>
    </author>

  
    
    <category term="Study" />
    
    <category term="Algorithm" />
    
  

  <summary>문자열 내에서 가장 긴 팰린드롬 부분 문자열(Longest Palindromic Substring)을 $O(n)$ 시간에 찾을 수 있는 알고리즘. 일반적으로 팰린드롬 부분 문자열 문제를 단순 확장 방식(Expand Around Center)으로 풀면 $O(n^2)$ 시간이 걸리지만, Manacher 알고리즘을 사용하면 이를 선형 시간에 해결할 수 있다.



1. 핵심 아이디어

Manacher 알고리즘의 핵심 아이디어는 다음과 같다.


  문자열의 변형(Preprocessing)
    
      짝수 길이 팰린드롬까지 다룰 수 있도록, 길이 N의 원본 문자열 각 문자 사이사이에 특정 구분 문자(대개 #)를 삽입해 길이 2N + 1의 확장 문자열로 만든다.
      예를 들어, 문자열 abba를...</summary>

  </entry>

  
  <entry>
    <title>Trie 구현</title>
    <link href="https://forte-naop.github.io/posts/Trie/" rel="alternate" type="text/html" title="Trie 구현" />
    <published>2025-02-03T14:11:04+09:00</published>
  
    <updated>2025-02-03T14:11:04+09:00</updated>
  
    <id>https://forte-naop.github.io/posts/Trie/</id>
    <content type="text/html" src="https://forte-naop.github.io/posts/Trie/" />
    <author>
      <name>Forte</name>
    </author>

  
    
    <category term="Study" />
    
    <category term="Algorithm" />
    
  

  <summary>Trie 자료구조 (C++ 구현)

문자열을 저장하고 효율적으로 검색하기 위한 트리 기반의 자료구조.


  단어 삽입: 단어를 효율적으로 추가할 수 있음.
  단어 검색: 저장된 단어가 존재하는지 빠르게 확인할 수 있음.
  접두사 검색: 주어진 접두사를 갖는 단어가 존재하는지 탐색할 수 있음.




1. TrieNode 구조체

Trie의 기본 구성 단위는 TrieNode이다.


  children: 알파벳 26개(대문자 ‘A’ ~ ‘Z’)에 대응하는 자식 노드를 저장하는 포인터 배열
    
      TrieNode* children[26]: 각 인덱스는 해당 알파벳에 해당하는 자식 노드 가리킴.
    
  
  isEnd: 현재 노드가 단어의 끝(종료 노드)인지를 나타내는 값
    
 ...</summary>

  </entry>

  
  <entry>
    <title>게임 보드 관련 잡설</title>
    <link href="https://forte-naop.github.io/posts/Bot_note_3/" rel="alternate" type="text/html" title="게임 보드 관련 잡설" />
    <published>2025-02-02T18:09:53+09:00</published>
  
    <updated>2025-02-02T18:09:53+09:00</updated>
  
    <id>https://forte-naop.github.io/posts/Bot_note_3/</id>
    <content type="text/html" src="https://forte-naop.github.io/posts/Bot_note_3/" />
    <author>
      <name>Forte</name>
    </author>

  
    
    <category term="Project" />
    
    <category term="Discord_Bot" />
    
  

  <summary>점수판과 재생 정보는 board.rs에서 다룸
register_channel.rs에서 등록한 텍스트 채널에
스레드 생성후 점수판과 재생 정보 embed를 갱신하는 방식

고려사항

  text channel 등록없이 play 하는 경우
  …




24-05-22

현재 board와 guild_queue가 분리되어 있어 트랙 이벤트가 발생할 때 board에 접근하기 불편함.

두 기능은 같이 동작하므로 결합시킬 예정

GuildQueue와 Board를 합치는 과정중
pub async fn register_channel(&amp;amp;amp;self, channel: GuildChannel) {
    let mut inner = self.inner.lock();
    let channel_id = channel...</summary>

  </entry>

  
  <entry>
    <title>음성 관련</title>
    <link href="https://forte-naop.github.io/posts/Bot_note_2/" rel="alternate" type="text/html" title="음성 관련" />
    <published>2025-02-02T18:06:00+09:00</published>
  
    <updated>2025-02-02T18:06:00+09:00</updated>
  
    <id>https://forte-naop.github.io/posts/Bot_note_2/</id>
    <content type="text/html" src="https://forte-naop.github.io/posts/Bot_note_2/" />
    <author>
      <name>Forte</name>
    </author>

  
    
    <category term="Project" />
    
    <category term="Discord_Bot" />
    
  

  <summary>구버전에서 dca(Ogg to DCA converter)라고 명명한 ogg packet을 이어붙인 자체 포맷대신 symphonia crate를 사용해 음성 바이트 스트림을 생성함.
Input::Lazy 의 Flow
YoutubeDl::into() 
    YoutubeDl::create_async (Compose trait 구현 사항)
        HttpRequest::create_async (Compose trait 구현 사항)
            HttpRequest::create_stream
                reqwest::Client::get -&amp;amp;gt; reqwest::Response
                reqwest::Response::bytes_stream -&amp;amp;gt...</summary>

  </entry>

  
  <entry>
    <title>Rust 동시성 문제</title>
    <link href="https://forte-naop.github.io/posts/Bot_note_1/" rel="alternate" type="text/html" title="Rust 동시성 문제" />
    <published>2025-02-02T17:57:07+09:00</published>
  
    <updated>2025-02-02T17:57:07+09:00</updated>
  
    <id>https://forte-naop.github.io/posts/Bot_note_1/</id>
    <content type="text/html" src="https://forte-naop.github.io/posts/Bot_note_1/" />
    <author>
      <name>Forte</name>
    </author>

  
    
    <category term="Project" />
    
    <category term="Discord_Bot" />
    
  

  <summary>std::process::Stdio::piped() 는 새로운 파이프를 생성한다. std::process::Command::stdin(Stdio::piped()) 같은 식으로 사용하면 stdin이 생성된 파이프로 대체 되는 식.
CommandObject.stdin.take().unwrap()으로 해당 파이프 디스크립터를 가져올 수 있다.
  
  
    Command::spawn()으로 생성된 Child 객체는 wait[_with_output]나 kill 호출 전까지 완료/종료되지 않는다.
만약 파일을 저장하는 작업 이후 연속해서 다른 Command 가 그 파일을 읽으려 한다면 파일이 생성되지 않아 정상적으로 작동하지 않는다. 버퍼 관련 문제인듯
따라서 wait 를 사용해 프로세스를 기다리면 파일이 ...</summary>

  </entry>

</feed>


