

<feed xmlns="http://www.w3.org/2005/Atom">
  <id>https://forte-naop.github.io/</id>
  <title>Forte's Notes</title>
  <subtitle>A minimal, responsive and feature-rich Jekyll theme for technical writing.</subtitle>
  <updated>2025-03-15T03:20:47+09:00</updated>
  <author>
    <name>Forte</name>
    <uri>https://forte-naop.github.io/</uri>
  </author>
  <link rel="self" type="application/atom+xml" href="https://forte-naop.github.io/feed.xml"/>
  <link rel="alternate" type="text/html" hreflang="en"
    href="https://forte-naop.github.io/"/>
  <generator uri="https://jekyllrb.com/" version="4.4.1">Jekyll</generator>
  <rights> © 2025 Forte </rights>
  <icon>/assets/img/favicons/favicon.ico</icon>
  <logo>/assets/img/favicons/favicon-96x96.png</logo>


  
  <entry>
    <title>RDP on UDP</title>
    <link href="https://forte-naop.github.io/posts/RDP-on-UDP/" rel="alternate" type="text/html" title="RDP on UDP" />
    <published>2025-03-12T16:31:36+09:00</published>
  
    <updated>2025-03-12T16:31:36+09:00</updated>
  
    <id>https://forte-naop.github.io/posts/RDP-on-UDP/</id>
    <content type="text/html" src="https://forte-naop.github.io/posts/RDP-on-UDP/" />
    <author>
      <name>Forte</name>
    </author>

  
    
    <category term="Project" />
    
    <category term="Network" />
    
  

  <summary>RDT on UDP



1. 목표


  UDP 소켓 프로그래밍을 활용하여 신뢰할 수 있는 데이터 전송 (RDT) 프로토콜 개발을 목표로 한다.
  단계별로 구현하며, 다음 네 가지 버전을 차례대로 개발한다.
    
      RDT 1.0
      RDT 2.2
      RDT 3.0
      RDT 3.0 + 파이프라이닝
    
  




2. 구현 세부 정보

상위 버전의 RDT는 이전 버전을 기반으로 구축된다. 따라서 각 버전을 순서대로 구현한다.

2.1 공통 기능


  기본 절차
    
      일대일 상황만 가정하며 다중 사용자 사례는 고려하지 않는다.
      [Receiver]
        
          소켓을 열고 포트 10090에 바인딩하여 Sender의 ...</summary>

  </entry>

  
  <entry>
    <title>Simple REST Server</title>
    <link href="https://forte-naop.github.io/posts/Simple_REST_Server/" rel="alternate" type="text/html" title="Simple REST Server" />
    <published>2025-03-10T17:36:13+09:00</published>
  
    <updated>2025-03-10T17:36:13+09:00</updated>
  
    <id>https://forte-naop.github.io/posts/Simple_REST_Server/</id>
    <content type="text/html" src="https://forte-naop.github.io/posts/Simple_REST_Server/" />
    <author>
      <name>Forte</name>
    </author>

  
    
    <category term="Project" />
    
    <category term="Network" />
    
  

  <summary>Implementation

HTTP 모듈(Flask 등)을 사용하지 않고, Python의 기본 socket 모듈과 스레딩(threading) 등을 이용하여 간단한 RESTful API를 구현한다. 전체적으로 사용자 정보 관리와 고정 메시지 응답, 그리고 Preflight 요청(CORS 처리) 등을 지원하며, 각 HTTP 메서드(GET, POST, PUT, DELETE, OPTIONS)에 대해 별도의 핸들러를 구현하였다.



1. main.py


  
    역할:
서버의 엔트리 포인트로, 소켓을 생성하고 클라이언트 연결을 기다리며 각 연결마다 새로운 스레드를 생성하여 요청을 처리함.
  
  
    구현:
    
      소켓 생성 및 바인딩:
        
          HOST와 P...</summary>

  </entry>

  
  <entry>
    <title>Manacher 알고리즘</title>
    <link href="https://forte-naop.github.io/posts/Manacher/" rel="alternate" type="text/html" title="Manacher 알고리즘" />
    <published>2025-02-06T08:42:47+09:00</published>
  
    <updated>2025-02-06T08:42:47+09:00</updated>
  
    <id>https://forte-naop.github.io/posts/Manacher/</id>
    <content type="text/html" src="https://forte-naop.github.io/posts/Manacher/" />
    <author>
      <name>Forte</name>
    </author>

  
    
    <category term="Study" />
    
    <category term="Algorithm" />
    
  

  <summary>문자열 내에서 가장 긴 팰린드롬 부분 문자열(Longest Palindromic Substring)을 $O(n)$ 시간에 찾을 수 있는 알고리즘. 일반적으로 팰린드롬 부분 문자열 문제를 단순 확장 방식(Expand Around Center)으로 풀면 $O(n^2)$ 시간이 걸리지만, Manacher 알고리즘을 사용하면 이를 선형 시간에 해결할 수 있다.



1. 핵심 아이디어

Manacher 알고리즘의 핵심 아이디어는 다음과 같다.


  문자열의 변형(Preprocessing)
    
      짝수 길이 팰린드롬까지 다룰 수 있도록, 길이 N의 원본 문자열 각 문자 사이사이에 특정 구분 문자(대개 #)를 삽입해 길이 2N + 1의 확장 문자열로 만든다.
      예를 들어, 문자열 abba를...</summary>

  </entry>

  
  <entry>
    <title>Trie 구현</title>
    <link href="https://forte-naop.github.io/posts/Trie/" rel="alternate" type="text/html" title="Trie 구현" />
    <published>2025-02-03T14:11:04+09:00</published>
  
    <updated>2025-02-03T14:11:04+09:00</updated>
  
    <id>https://forte-naop.github.io/posts/Trie/</id>
    <content type="text/html" src="https://forte-naop.github.io/posts/Trie/" />
    <author>
      <name>Forte</name>
    </author>

  
    
    <category term="Study" />
    
    <category term="Algorithm" />
    
  

  <summary>Trie 자료구조 (C++ 구현)

문자열을 저장하고 효율적으로 검색하기 위한 트리 기반의 자료구조.


  단어 삽입: 단어를 효율적으로 추가할 수 있음.
  단어 검색: 저장된 단어가 존재하는지 빠르게 확인할 수 있음.
  접두사 검색: 주어진 접두사를 갖는 단어가 존재하는지 탐색할 수 있음.




1. TrieNode 구조체

Trie의 기본 구성 단위는 TrieNode이다.


  children: 알파벳 26개(대문자 ‘A’ ~ ‘Z’)에 대응하는 자식 노드를 저장하는 포인터 배열
    
      TrieNode* children[26]: 각 인덱스는 해당 알파벳에 해당하는 자식 노드 가리킴.
    
  
  isEnd: 현재 노드가 단어의 끝(종료 노드)인지를 나타내는 값
    
 ...</summary>

  </entry>

  
  <entry>
    <title>게임 보드 관련 잡설</title>
    <link href="https://forte-naop.github.io/posts/Bot_note_3/" rel="alternate" type="text/html" title="게임 보드 관련 잡설" />
    <published>2025-02-02T18:09:53+09:00</published>
  
    <updated>2025-02-02T18:09:53+09:00</updated>
  
    <id>https://forte-naop.github.io/posts/Bot_note_3/</id>
    <content type="text/html" src="https://forte-naop.github.io/posts/Bot_note_3/" />
    <author>
      <name>Forte</name>
    </author>

  
    
    <category term="Project" />
    
    <category term="Discord_Bot" />
    
  

  <summary>점수판과 재생 정보는 board.rs에서 다룸
register_channel.rs에서 등록한 텍스트 채널에
스레드 생성후 점수판과 재생 정보 embed를 갱신하는 방식

고려사항

  text channel 등록없이 play 하는 경우
  …




24-05-22

현재 board와 guild_queue가 분리되어 있어 트랙 이벤트가 발생할 때 board에 접근하기 불편함.

두 기능은 같이 동작하므로 결합시킬 예정

GuildQueue와 Board를 합치는 과정중
pub async fn register_channel(&amp;amp;amp;self, channel: GuildChannel) {
    let mut inner = self.inner.lock();
    let channel_id = channel...</summary>

  </entry>

</feed>


